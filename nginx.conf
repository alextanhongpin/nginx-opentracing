# Load the OpenTracing dynamic module.
load_module modules/ngx_http_opentracing_module.so;

events {}

http {
  # Enable tracing for all requests.
  opentracing on;

  # Load a vendor tracer
  opentracing_load_tracer /usr/local/lib/libjaegertracing_plugin.so /etc/jaeger-nginx-config.json;

  # or 
  #   opentracing_load_tracer /usr/local/lib/liblightstep_tracer_plugin.so /path/to/config;
  # or 
  #   opentracing_load_tracer /usr/local/lib/libzipkin_opentracing_plugin.so /path/to/config;
  # or
  #   opentracing_load_tracer /usr/local/lib/libdd_opentracing_plugin.so /path/to/config;


  # Optionally, set additional tags.
  opentracing_tag http_user_agent $http_user_agent;

  upstream backend {
    server host.docker.internal:8080;
  }

  server {
    location ~ {
      opentracing_trace_locations on;

      proxy_pass http://backend;
      # The operation name used for spans defaults to the name of the location
      # block, but you can use this directive to customize it.
      opentracing_operation_name $uri;
      opentracing_tag nginx.upstream_addr $upstream_addr;
      # Propagate the active span context upstream, so that the trace can be
      # continued by the backend.
      # See http://opentracing.io/documentation/pages/api/cross-process-tracing.html
      opentracing_propagate_context;
    }
  }
}
